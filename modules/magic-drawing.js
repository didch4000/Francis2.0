// modules/magic-drawing.js - Outil de dessin magique avec OpenCV
// 
// üé® GUIDE D'UTILISATION:
// =====================
// 
// 1. Bouton dans la toolbar: Cliquer sur le bouton ‚ú® "Dessin Magique"
// 2. S√©lection: Tracer un rectangle sur la zone √† analyser
// 3. D√©tection: L'outil utilise OpenCV.js pour d√©tecter les lignes blanches
// 4. Trac√©: Les marquages sont automatiquement dessin√©s avec Fabric.js
//
// üîß FONCTIONNALIT√âS:
// ===================
// ‚Ä¢ D√©tection automatique des lignes de marquage routier
// ‚Ä¢ S√©lection de zone d'int√©r√™t par rectangle
// ‚Ä¢ Filtrage des lignes selon l'orientation et la longueur
// ‚Ä¢ Trac√© automatique en superposition avec Fabric.js
// ‚Ä¢ Param√®tres ajustables (sensibilit√©, √©paisseur, couleur)
//
(function() {
    'use strict';
    
    // Gestionnaire de l'outil de dessin magique avec OpenCV
    class MagicDrawingManager {
        constructor(state, layerManager, canvasManager) {
            this.state = state;
            this.layerManager = layerManager;
            this.canvasManager = canvasManager;
            
            // Configuration par d√©faut
            this.config = {
                lineColor: '#FFFFFF',          // Couleur des lignes trac√©es
                lineThickness: 2,              // √âpaisseur des lignes
                minLineLength: 30,             // Longueur minimale des lignes d√©tect√©es
                cannyLow: 50,                  // Seuil bas pour Canny
                cannyHigh: 150,                // Seuil haut pour Canny
                houghThreshold: 50,            // Seuil pour HoughLinesP
                houghMinLineLength: 30,        // Longueur minimale pour Hough
                houghMaxLineGap: 10,           // Espacement maximal pour Hough
                filterVertical: true,          // Filtrer les lignes verticales
                filterHorizontal: true,        // Filtrer les lignes horizontales
                preprocess: true               // Pr√©processing avanc√© de l'image
            };
            
            // √âtat de l'outil
            this.isActive = false;
            this.isSelecting = false;
            this.selectionRect = null;
            this.currentCanvas = null;
            this.opencv = null; // R√©f√©rence √† OpenCV.js
        }

        // Initialisation du module
        async init() {
            console.log('‚ú® Initialisation du Magic Drawing Manager...');
            
            // Charger OpenCV.js si pas d√©j√† charg√©
            await this.loadOpenCV();
            
            this.setupEventListeners();
            console.log('‚úÖ Magic Drawing Manager initialis√©');
        }

        // Chargement d'OpenCV.js
        async loadOpenCV() {
            return new Promise((resolve, reject) => {
                // V√©rifier si OpenCV est d√©j√† charg√©
                if (typeof cv !== 'undefined') {
                    this.opencv = cv;
                    console.log('‚úÖ OpenCV.js d√©j√† disponible');
                    resolve();
                    return;
                }

                console.log('‚è≥ Chargement d\'OpenCV.js...');
                
                // Charger le script OpenCV.js
                const script = document.createElement('script');
                script.src = 'https://docs.opencv.org/4.8.0/opencv.js';
                script.async = true;
                
                script.onload = () => {
                    // Attendre que OpenCV soit initialis√©
                    const checkOpenCV = () => {
                        if (typeof cv !== 'undefined' && cv.Mat) {
                            this.opencv = cv;
                            console.log('‚úÖ OpenCV.js charg√© et initialis√©');
                            resolve();
                        } else {
                            setTimeout(checkOpenCV, 100);
                        }
                    };
                    checkOpenCV();
                };
                
                script.onerror = () => {
                    console.error('‚ùå Erreur lors du chargement d\'OpenCV.js');
                    reject(new Error('Impossible de charger OpenCV.js'));
                };
                
                document.head.appendChild(script);
            });
        }

        // Configuration des √©couteurs d'√©v√©nements
        setupEventListeners() {
            // √âcouter l'activation de l'outil magique
            document.addEventListener('magic-drawing-start', () => {
                this.startMagicDrawing();
            });

            // √âcouter les √©v√©nements de canvas pour la s√©lection
            document.addEventListener('canvas-mouse-down', (e) => {
                if (this.isActive) {
                    this.handleMouseDown(e.detail);
                }
            });

            document.addEventListener('canvas-mouse-move', (e) => {
                if (this.isActive && this.isSelecting) {
                    this.handleMouseMove(e.detail);
                }
            });

            document.addEventListener('canvas-mouse-up', (e) => {
                if (this.isActive && this.isSelecting) {
                    this.handleMouseUp(e.detail);
                }
            });

            // √âcouter les changements de configuration
            document.addEventListener('magic-drawing-config-update', (e) => {
                this.updateConfig(e.detail);
            });

            // √âcouter l'arr√™t de l'outil
            document.addEventListener('magic-drawing-stop', () => {
                this.stopMagicDrawing();
            });
        }

        // D√©marrer l'outil de dessin magique
        startMagicDrawing() {
            if (!this.opencv) {
                alert('‚ùå OpenCV.js n\'est pas encore charg√©. Veuillez patienter...');
                return;
            }

            const canvas = this.state.getActiveCanvas();
            if (!canvas) {
                alert('‚ùå Veuillez d\'abord s√©lectionner un calque.');
                return;
            }

            // V√©rifier qu'il y a une image de fond √† analyser
            const backgroundImage = this.findBackgroundImage();
            if (!backgroundImage) {
                alert('‚ùå Aucune image de fond trouv√©e √† analyser.\\n\\n' +
                      'Veuillez d\'abord ajouter une image de plan avec le bouton üñºÔ∏è.');
                return;
            }

            this.isActive = true;
            this.currentCanvas = canvas;
            
            // Changer le curseur pour indiquer le mode s√©lection
            this.updateCursor('crosshair');
            
            console.log('‚ú® Outil de dessin magique activ√©');
            console.log('üìù Tracez un rectangle sur la zone √† analyser');
            
            // Afficher les instructions √† l'utilisateur
            this.showInstructions();
        }

        // Trouver l'image de fond dans les calques
        findBackgroundImage() {
            for (const layer of this.state.layers) {
                // Ignorer les calques de dessin
                if (layer.name === this.state.DRAWING_LAYER_NAME || layer.name === 'Calque de dessin') {
                    continue;
                }
                
                if (layer.fabricCanvas) {
                    // Chercher dans backgroundImage
                    if (layer.fabricCanvas.backgroundImage) {
                        return layer.fabricCanvas.backgroundImage;
                    }
                    
                    // Chercher dans les objets
                    const imageObj = layer.fabricCanvas.getObjects().find(obj => obj.type === 'image');
                    if (imageObj) {
                        return imageObj;
                    }
                }
            }
            return null;
        }

        // Gestion des √©v√©nements souris pour la s√©lection
        handleMouseDown(event) {
            if (!this.isActive) return;

            this.isSelecting = true;
            
            // Commencer la s√©lection de rectangle
            this.selectionRect = {
                startX: event.pointer.x,
                startY: event.pointer.y,
                endX: event.pointer.x,
                endY: event.pointer.y
            };

            // Cr√©er un rectangle de s√©lection visuel
            this.createSelectionVisual();
        }

        handleMouseMove(event) {
            if (!this.isActive || !this.isSelecting) return;

            // Mettre √† jour le rectangle de s√©lection
            this.selectionRect.endX = event.pointer.x;
            this.selectionRect.endY = event.pointer.y;
            
            // Mettre √† jour le visuel
            this.updateSelectionVisual();
        }

        async handleMouseUp(event) {
            if (!this.isActive || !this.isSelecting) return;

            this.isSelecting = false;
            
            // Finaliser la s√©lection
            this.selectionRect.endX = event.pointer.x;
            this.selectionRect.endY = event.pointer.y;
            
            // Supprimer le visuel de s√©lection
            this.removeSelectionVisual();
            
            // V√©rifier que la zone s√©lectionn√©e est suffisamment grande
            const width = Math.abs(this.selectionRect.endX - this.selectionRect.startX);
            const height = Math.abs(this.selectionRect.endY - this.selectionRect.startY);
            
            if (width < 20 || height < 20) {
                console.log('‚ö†Ô∏è Zone s√©lectionn√©e trop petite, ignor√©e');
                return;
            }

            // Lancer l'analyse de la zone s√©lectionn√©e
            try {
                console.log('üîç Analyse de la zone s√©lectionn√©e...', this.selectionRect);
                await this.analyzeSelectedArea();
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'analyse:', error);
                alert('Erreur lors de l\'analyse: ' + error.message);
            }
        }

        // Cr√©er le rectangle de s√©lection visuel
        createSelectionVisual() {
            this.removeSelectionVisual(); // S'assurer qu'il n'y en a qu'un
            
            const rect = new fabric.Rect({
                left: this.selectionRect.startX,
                top: this.selectionRect.startY,
                width: 0,
                height: 0,
                fill: 'rgba(0, 122, 255, 0.1)',
                stroke: '#007AFF',
                strokeWidth: 2,
                strokeDashArray: [5, 5],
                selectable: false,
                evented: false,
                isSelectionRect: true
            });
            
            this.currentCanvas.add(rect);
            this.selectionVisual = rect;
            this.currentCanvas.renderAll();
        }

        // Mettre √† jour le rectangle de s√©lection visuel
        updateSelectionVisual() {
            if (!this.selectionVisual) return;
            
            const left = Math.min(this.selectionRect.startX, this.selectionRect.endX);
            const top = Math.min(this.selectionRect.startY, this.selectionRect.endY);
            const width = Math.abs(this.selectionRect.endX - this.selectionRect.startX);
            const height = Math.abs(this.selectionRect.endY - this.selectionRect.startY);
            
            this.selectionVisual.set({
                left: left,
                top: top,
                width: width,
                height: height
            });
            
            this.currentCanvas.renderAll();
        }

        // Supprimer le rectangle de s√©lection visuel
        removeSelectionVisual() {
            if (this.selectionVisual) {
                this.currentCanvas.remove(this.selectionVisual);
                this.selectionVisual = null;
                this.currentCanvas.renderAll();
            }
        }

        // Analyser la zone s√©lectionn√©e avec OpenCV
        async analyzeSelectedArea() {
            console.log('üîç D√©but de l\'analyse OpenCV...');
            
            // Obtenir l'image de fond
            const backgroundImage = this.findBackgroundImage();
            if (!backgroundImage) {
                throw new Error('Image de fond introuvable');
            }

            // Extraire la r√©gion d'int√©r√™t de l'image
            const imageCanvas = await this.extractImageRegion(backgroundImage);
            
            // Traiter l'image avec OpenCV
            const lines = await this.detectLinesWithOpenCV(imageCanvas);
            
            // Tracer les lignes d√©tect√©es
            this.drawDetectedLines(lines);
            
            // D√©sactiver l'outil
            this.stopMagicDrawing();
            
            console.log(`‚úÖ Analyse termin√©e: ${lines.length} lignes d√©tect√©es et trac√©es`);
        }

        // Extraire la r√©gion d'int√©r√™t de l'image
        async extractImageRegion(backgroundImage) {
            // Cr√©er un canvas temporaire pour extraire la r√©gion
            const tempCanvas = document.createElement('canvas');
            const ctx = tempCanvas.getContext('2d');
            
            // Calculer les coordonn√©es de la r√©gion dans l'image
            const imgBounds = backgroundImage.getBoundingRect();
            
            // Convertir les coordonn√©es de s√©lection vers les coordonn√©es image
            const relX1 = (Math.min(this.selectionRect.startX, this.selectionRect.endX) - imgBounds.left) / imgBounds.width;
            const relY1 = (Math.min(this.selectionRect.startY, this.selectionRect.endY) - imgBounds.top) / imgBounds.height;
            const relX2 = (Math.max(this.selectionRect.startX, this.selectionRect.endX) - imgBounds.left) / imgBounds.width;
            const relY2 = (Math.max(this.selectionRect.startY, this.selectionRect.endY) - imgBounds.top) / imgBounds.height;
            
            // S'assurer que les coordonn√©es sont dans les limites
            const clampedX1 = Math.max(0, Math.min(1, relX1));
            const clampedY1 = Math.max(0, Math.min(1, relY1));
            const clampedX2 = Math.max(0, Math.min(1, relX2));
            const clampedY2 = Math.max(0, Math.min(1, relY2));
            
            // Obtenir l'√©l√©ment image source
            const imgElement = backgroundImage._element || backgroundImage._originalElement;
            if (!imgElement) {
                throw new Error('Impossible d\'acc√©der √† l\'√©l√©ment image');
            }
            
            // Calculer les dimensions de la r√©gion √† extraire
            const sourceX = clampedX1 * imgElement.naturalWidth;
            const sourceY = clampedY1 * imgElement.naturalHeight;
            const sourceWidth = (clampedX2 - clampedX1) * imgElement.naturalWidth;
            const sourceHeight = (clampedY2 - clampedY1) * imgElement.naturalHeight;
            
            // Configurer le canvas temporaire
            tempCanvas.width = sourceWidth;
            tempCanvas.height = sourceHeight;
            
            // Extraire la r√©gion
            ctx.drawImage(
                imgElement,
                sourceX, sourceY, sourceWidth, sourceHeight,
                0, 0, sourceWidth, sourceHeight
            );
            
            console.log(`üìê R√©gion extraite: ${sourceWidth}x${sourceHeight}px`);
            return tempCanvas;
        }

        // D√©tecter les lignes avec OpenCV
        async detectLinesWithOpenCV(imageCanvas) {
            console.log('üß† D√©tection des lignes avec OpenCV...');
            
            try {
                // Charger l'image dans OpenCV
                const src = this.opencv.imread(imageCanvas);
                
                // Cr√©er les matrices de travail
                const gray = new this.opencv.Mat();
                const blur = new this.opencv.Mat();
                const edges = new this.opencv.Mat();
                const lines = new this.opencv.Mat();
                
                // √âtape 1: Conversion en niveaux de gris
                this.opencv.cvtColor(src, gray, this.opencv.COLOR_RGBA2GRAY);
                
                // √âtape 2: Pr√©processing pour am√©liorer la d√©tection des lignes blanches
                if (this.config.preprocess) {
                    // Flouter l√©g√®rement pour r√©duire le bruit
                    this.opencv.GaussianBlur(gray, blur, new this.opencv.Size(3, 3), 0);
                    
                    // Am√©liorer le contraste pour les lignes blanches
                    this.opencv.threshold(blur, blur, 180, 255, this.opencv.THRESH_BINARY);
                } else {
                    gray.copyTo(blur);
                }
                
                // √âtape 3: D√©tection des contours avec Canny
                this.opencv.Canny(blur, edges, this.config.cannyLow, this.config.cannyHigh);
                
                // √âtape 4: D√©tection des lignes avec HoughLinesP
                this.opencv.HoughLinesP(
                    edges, 
                    lines, 
                    1,                              // R√©solution rho (pixels)
                    Math.PI / 180,                  // R√©solution theta (radians)
                    this.config.houghThreshold,     // Seuil de votes
                    this.config.houghMinLineLength, // Longueur minimale
                    this.config.houghMaxLineGap     // Espacement maximal
                );
                
                console.log(`üìè ${lines.rows} lignes d√©tect√©es par OpenCV`);
                
                // Convertir les r√©sultats en format utilisable
                const detectedLines = [];
                for (let i = 0; i < lines.rows; i++) {
                    const line = lines.data32S.slice(i * 4, i * 4 + 4);
                    const [x1, y1, x2, y2] = line;
                    
                    // Calculer les propri√©t√©s de la ligne
                    const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
                    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
                    
                    // Filtrer selon les crit√®res
                    if (this.shouldKeepLine(length, angle)) {
                        detectedLines.push({
                            x1, y1, x2, y2,
                            length,
                            angle,
                            canvasCoords: this.convertToCanvasCoords(x1, y1, x2, y2)
                        });
                    }
                }
                
                // Nettoyer les matrices OpenCV
                src.delete();
                gray.delete();
                blur.delete();
                edges.delete();
                lines.delete();
                
                console.log(`‚úÖ ${detectedLines.length} lignes conserv√©es apr√®s filtrage`);
                return detectedLines;
                
            } catch (error) {
                console.error('‚ùå Erreur OpenCV:', error);
                throw new Error('Erreur lors de la d√©tection OpenCV: ' + error.message);
            }
        }

        // Filtrer les lignes selon les crit√®res
        shouldKeepLine(length, angle) {
            // Filtrer par longueur minimale
            if (length < this.config.minLineLength) {
                return false;
            }
            
            // Filtrer par orientation si demand√©
            const absAngle = Math.abs(angle);
            
            // Ligne horizontale (¬±15¬∞)
            const isHorizontal = absAngle < 15 || absAngle > 165;
            // Ligne verticale (¬±15¬∞ autour de 90¬∞)
            const isVertical = (absAngle > 75 && absAngle < 105);
            
            if (!this.config.filterHorizontal && isHorizontal) {
                return false;
            }
            
            if (!this.config.filterVertical && isVertical) {
                return false;
            }
            
            return true;
        }

        // Convertir les coordonn√©es d√©tect√©es vers les coordonn√©es canvas
        convertToCanvasCoords(x1, y1, x2, y2) {
            // Calculer les coordonn√©es dans le canvas principal
            const selectionLeft = Math.min(this.selectionRect.startX, this.selectionRect.endX);
            const selectionTop = Math.min(this.selectionRect.startY, this.selectionRect.endY);
            const selectionWidth = Math.abs(this.selectionRect.endX - this.selectionRect.startX);
            const selectionHeight = Math.abs(this.selectionRect.endY - this.selectionRect.startY);
            
            // Obtenir les dimensions de l'image extraite pour le calcul du ratio
            const backgroundImage = this.findBackgroundImage();
            if (!backgroundImage) {
                // Fallback: conversion directe
                return {
                    x1: selectionLeft + x1,
                    y1: selectionTop + y1,
                    x2: selectionLeft + x2,
                    y2: selectionTop + y2
                };
            }
            
            // Les coordonn√©es x1,y1,x2,y2 sont en pixels de l'image extraite
            // Nous devons les re-projeter dans la zone de s√©lection
            return {
                x1: selectionLeft + x1,
                y1: selectionTop + y1,
                x2: selectionLeft + x2,
                y2: selectionTop + y2
            };
        }

        // Tracer les lignes d√©tect√©es sur le canvas
        drawDetectedLines(lines) {
            console.log(`üé® Trac√© de ${lines.length} lignes sur le canvas...`);
            
            const canvas = this.currentCanvas;
            let drawnCount = 0;
            
            lines.forEach((line, index) => {
                try {
                    const fabricLine = new fabric.Line([
                        line.canvasCoords.x1,
                        line.canvasCoords.y1,
                        line.canvasCoords.x2,
                        line.canvasCoords.y2
                    ], {
                        stroke: this.config.lineColor,
                        strokeWidth: this.config.lineThickness,
                        selectable: true,
                        evented: true,
                        isMagicDrawn: true,
                        magicDrawIndex: index,
                        originalLength: line.length,
                        originalAngle: line.angle
                    });
                    
                    canvas.add(fabricLine);
                    drawnCount++;
                    
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Erreur lors du trac√© de la ligne ${index}:`, error);
                }
            });
            
            canvas.renderAll();
            
            // Sauvegarder l'√©tat pour undo/redo
            this.layerManager.undoRedoManager.saveState(canvas, this.state.getActiveLayer());
            
            console.log(`‚úÖ ${drawnCount} lignes trac√©es avec succ√®s`);
            
            // Notifier l'utilisateur
            if (drawnCount > 0) {
                alert(`‚ú® Dessin magique termin√© !\\n\\n${drawnCount} marquages routiers d√©tect√©s et trac√©s.`);
            } else {
                alert(`‚ÑπÔ∏è Aucun marquage routier d√©tect√© dans la zone s√©lectionn√©e.\\n\\nEssayez avec une zone diff√©rente ou ajustez les param√®tres.`);
            }
        }

        // Arr√™ter l'outil de dessin magique
        stopMagicDrawing() {
            this.isActive = false;
            this.isSelecting = false;
            this.selectionRect = null;
            this.removeSelectionVisual();
            this.updateCursor('default');
            
            // Retourner en mode s√©lection
            document.dispatchEvent(new CustomEvent('auto-select-tool'));
            
            console.log('‚úÖ Outil de dessin magique d√©sactiv√©');
        }

        // Mettre √† jour le curseur
        updateCursor(cursor) {
            const canvasContainer = document.getElementById('canvas-container');
            if (canvasContainer) {
                canvasContainer.style.cursor = cursor;
            }
        }

        // Afficher les instructions
        showInstructions() {
            const instructions = document.createElement('div');
            instructions.id = 'magic-drawing-instructions';
            instructions.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 15px;
                border-radius: 8px;
                font-size: 14px;
                z-index: 10002;
                max-width: 300px;
                backdrop-filter: blur(3px);
                border: 1px solid rgba(255, 255, 255, 0.2);
            `;
            instructions.innerHTML = `
                <strong>‚ú® Dessin Magique Actif</strong><br>
                üìù Tracez un rectangle sur la zone √† analyser<br>
                üîç Les marquages routiers seront d√©tect√©s automatiquement<br>
                <br>
                <button onclick="document.dispatchEvent(new CustomEvent('magic-drawing-stop'))" style="background: #ff3b30; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Annuler</button>
            `;
            
            document.body.appendChild(instructions);
            
            // Supprimer automatiquement apr√®s 10 secondes
            setTimeout(() => {
                const el = document.getElementById('magic-drawing-instructions');
                if (el) el.remove();
            }, 10000);
        }

        // Mettre √† jour la configuration
        updateConfig(newConfig) {
            this.config = { ...this.config, ...newConfig };
            console.log('‚öôÔ∏è Configuration mise √† jour:', this.config);
        }

        // Obtenir le statut de l'outil
        getStatus() {
            return {
                isActive: this.isActive,
                isSelecting: this.isSelecting,
                opencvLoaded: !!this.opencv,
                config: this.config
            };
        }
    }

    // Exposer dans le namespace global
    if (typeof window !== 'undefined') {
        window.PlanEditor.MagicDrawingManager = MagicDrawingManager;
        console.log('‚úÖ MagicDrawingManager expos√© dans PlanEditor');
    }

})();